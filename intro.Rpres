Data wrangling with the Tidyverse
========================================================
author: Hezi Buba & Irene Steves
date: 31 October 2018
autosize: true

Presentation materials: https://github.com/ecodatasci-tlv/datawrangling  
Short link: https://bit.ly/2AuTVoD

Projects in R
========================================================

![](img/kitchen.jpg)

Comfortable but hard to reproduce

***

![](img/lunchbox.jpg) 

Portable, organized, minimalistic

Why use projects?
========================================================

Projects help to maintain good workflow habits:

- **Fresh R processes** - each project comes with its own environment
- **Portability** - projects have clearly defined base directories; makes it easy to [use relative paths](https://www.tidyverse.org/articles/2017/12/workflow-vs-script/) 

Extra reading: [basic care and feeding of data in R](http://stat545.com/block006_care-feeding-data.html)

GitHub
========================================================

GitHub is a code storage/sharing platform. Use it to:

- browse source code ([CRAN](https://github.com/cran),  [tidyverse](https://github.com/tidyverse/), [rOpenSci](https://github.com/ropensci), [r-lib](https://github.com/r-lib))
- use packages not on CRAN (`devtools::install_github("account_name/repo_name")`)
- share/store analyses and functions
- browse past versions of code
- host web pages

Cloning GitHub repositories 
========================================================

If you _don't_ have git installed: get GitHub files off the web and onto your local computer by clicking `Download ZIP`.

![](img/github-download-zip.PNG)

Cloning GitHub repositories 
========================================================

If you _have_ git installed and ready to go on RStudio (excellent instructions [here](http://happygitwithr.com/)), you can do the following:

(1) FORK the repository (make a copy of it to your github.com account)

![](img/github-fork.PNG)

(2) In RStudio: `File --> New Project --> Version Control --> Git`. The repository URL should be in the form: `https://github.com/YOUR_ACCOUNT/REPO_NAME`.

===
![](img/github-basics.png)

Tibbles
========================================================

>Tibbles are data.frames that are lazy and surly: **they do less** (i.e. they don't change variable names or types, and don't do partial matching) and **complain more** (e.g. when a variable does not exist). This forces you to confront problems earlier, typically leading to cleaner, more expressive code.

  
https://tibble.tidyverse.org/

Tibbles print nicely!
========================================================

```{r eval = FALSE}
iris

#versus

library(tidyverse)
as_tibble(iris)
```

Tidy data
========================================================

>If I had one thing to tell biologists learning bioinformatics, it would be “write code for humans, write data for computers”.
>
>— Vince Buffalo (@vsbuffalo) July 20, 2013

===

![](img/untidy-lotr.PNG)

https://github.com/jennybc/lotr-tidy/blob/master/01-intro.md

===

```{r echo = FALSE}
library(DT)
lotr <- tibble::tribble(
                           ~Film,  ~Gender,    ~Race, ~Words,
    "The Fellowship Of The Ring", "Female",    "Elf",  1229L,
    "The Fellowship Of The Ring",   "Male",    "Elf",   971L,
    "The Fellowship Of The Ring", "Female", "Hobbit",    14L,
    "The Fellowship Of The Ring",   "Male", "Hobbit",  3644L,
    "The Fellowship Of The Ring", "Female",    "Man",     0L,
    "The Fellowship Of The Ring",   "Male",    "Man",  1995L,
                "The Two Towers", "Female",    "Elf",   331L,
                "The Two Towers",   "Male",    "Elf",   513L,
                "The Two Towers", "Female", "Hobbit",     0L,
                "The Two Towers",   "Male", "Hobbit",  2463L,
                "The Two Towers", "Female",    "Man",   401L,
                "The Two Towers",   "Male",    "Man",  3589L,
        "The Return Of The King", "Female",    "Elf",   183L,
        "The Return Of The King",   "Male",    "Elf",   510L,
        "The Return Of The King", "Female", "Hobbit",     2L,
        "The Return Of The King",   "Male", "Hobbit",  2673L,
        "The Return Of The King", "Female",    "Man",   268L,
        "The Return Of The King",   "Male",    "Man",  2459L
    ) 

knitr::kable(head(lotr, 10))
```

Code should be pleasant to read
===

![](https://media.giphy.com/media/OWyYSmZT43pxm/giphy.gif)


===

![](https://www.tidyverse.org/images/tidyverse-default.png)

Tidyverse
===

- shared syntax & conventions
- tibble in, tibble out

select()
===

![](img/xls-select.PNG)

filter()
===
![](img/xls-filter.PNG)

arrange()
===
![](img/xls-arrange.PNG)

mutate()
===
![](img/xls-mutate.PNG)

group_by(), summarize()
===
![](img/xls-summary.PNG)

Pipe ("then")
===

![](https://upload.wikimedia.org/wikipedia/en/b/b9/MagrittePipe.jpg)

***

Data in, data out

```{r eval = FALSE}
do_another_thing(do_something(data))

# versus

data %>% 
    do_something() %>% 
    do_another_thing() 
```

Star wars
===
```{r}
library(tidyverse)
data(starwars)
```

===

```{r}
starwars %>% 
    select(name, height, mass, species)
```

===

```{r}
starwars %>% 
    select(name, height, mass, species) %>% 
    mutate(bmi = mass/(0.01*height)^2)
```

===

```{r}
starwars %>% 
    select(name, height, mass, species) %>% 
    mutate(bmi = mass/(0.01*height)^2) %>% 
    arrange(desc(bmi))
```

===

```{r}
starwars %>% 
    select(name, height, mass, species) %>% 
    mutate(bmi = mass/(0.01*height)^2) %>% 
    filter(species == "Droid")
```

===

```{r}
starwars %>% 
    select(name, height, mass, species) %>% 
    mutate(bmi = mass/(0.01*height)^2) %>% 
    filter(species == "Droid", height < 100)
```

===

```{r}
starwars %>% 
    select(name, height, mass, species) %>% 
    group_by(species) %>% 
    summarize(count = n(),
              avg_mass = mean(mass, na.rm = TRUE),
              max_height = max(height, na.rm = TRUE)) %>% 
    arrange(desc(count))
```

Your turn
===

- What is the most common eye color?
- Who is the youngest human?
- Which homeworld has the most characters?

What else can you do?
===

- conditional functions: `*_at`, `*_if`, `*_all`
- `rename` columns
- `lead` & `lag` for time series
- `join` & `bind` data frames
- `count` & `tally` shortcuts for group_by and summarize

gather() & spread()
===

![](https://datacarpentry.org/R-ecology-lesson/img/spread_data_R.png)

https://datacarpentry.org/R-ecology-lesson/03-dplyr.html

Community matrix!
===

```{r}
starwars %>% 
    select(name, films) %>% 
    unnest(films) %>% 
    mutate(present = 1) %>% 
    spread(name, present, fill = 0)
```

Take home messages
===

- your most important collaborator = future you!
- keep code readable and re-runnable

![](https://media.giphy.com/media/Vccpm1O9gV1g4/giphy.gif)

Your turn!
===

https://github.com/rfordatascience/tidytuesday/tree/master/data/2018-10-23  
Short link: https://bit.ly/2CQMvho

